#+TITLE: Ergonomic Keyboard "shajra" Mappings (with Nix)
#+SETUPFILE: doc/links.org

[[https://github.com/shajra/shajra-keyboards/actions][https://github.com/shajra/shajra-keyboards/workflows/CI/badge.svg]]

* About the Project

  This project has the "shajra" keyboard mappings for two ergonomic split
  keyboards:

  - [[keyboardio][Keyboardio's Model 01]], programmed with [[kaleidoscope][Kaleidoscope]] firmware.
  - [[ergodox-ez][ZSA Technology Labs' Ergodox EZ]], programmed with [[qmk][QMK]] firmware

  Beyond the keymap, this project offers some streamlined automation with [[nix][Nix]]
  that you can use for your own keymap. This automation works for GNU/Linux
  only (sorry, not MacOS or Windows). See [[file:doc/nix.org][the provided documentation on Nix]] for
  more on what Nix is, why we're motivated to use it, and how to get set up
  with it for this project.

  The rest of this document discusses using this automation. To get the most
  out of the keymap itself, you may be interested in the [[file:doc/design.org][design document]]
  explaining the motivation behind the mapping.

* The mappings

  The "shajra" keymaps for both keyboards are extremely similar, which works
  out well because the physical layouts of these keyboards are also similar. We
  can more easily switch from one keyboard to another, and retain the design
  benefits of the mapping.

*** Model 01 "shajra" keymap

    [[file:doc/model-01-shajra-layout.png]]

*** Ergodox EZ "shajra" keymap

    [[file:doc/ergodox-ez-shajra-layout.png]]

* Using these key mappings

  This project only supports a GNU/Linux operating system (sorry, not MacOS or
  Windows) with the [[nix][Nix package manager]] installed.

  QMK and Kaleidoscope have build complexities and dependencies that can take a
  moment to work through. Nix can automate this hassle away by downloading and
  setting up all the necessary third-party dependencies in a way that

  - is highly reproducible
  - won't conflict with your current system/configuration.

  By using Nix, we won't have to worry about downloading QMK or Kaleidoscope,
  or making sure we have the right version of build tools like Arduino
  installed, or messing with Git submodules, or setting up environment
  variables. Nix does all this for us. The provided scripts simplify using Nix
  even further.

  The following steps will get your keyboard flashed.

*** 1. Install Nix on your GNU/Linux distribution

    #+INCLUDE: "doc/nix.org::*Nix package manager setup" :only-contents t

*** 2. Set up Cachix

    #+INCLUDE: "doc/nix.org::*Cache setup" :only-contents t

*** 3. Make sure your udev rules are set

    To program either keyboard with a new mapping, you need to augment your OS
    configuration with new udev rules.

    The following are recommended rules for each keyboard:

    #+BEGIN_EXAMPLE
      # For Teensy/Ergodox
      ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789B]?", ENV{ID_MM_DEVICE_IGNORE}="1", ENV{ID_MM_PORT_IGNORE}="1"
      ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789A]?", ENV{MTP_NO_PROBE}="1"
      SUBSYSTEMS=="usb", ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789ABCD]?", MODE:="0666"
      KERNEL=="ttyACM*", ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789B]?", MODE:="0666"

      # For Kaleidoscope/Keyboardio
      SUBSYSTEMS=="usb", ATTRS{idVendor}=="1209", ATTRS{idProduct}=="2300", SYMLINK+="model01", ENV{ID_MM_DEVICE_IGNORE}:="1", ENV{ID_MM_CANDIDATE}:="0", TAG+="uaccess", TAG+="seat"
      SUBSYSTEMS=="usb", ATTRS{idVendor}=="1209", ATTRS{idProduct}=="2301", SYMLINK+="model01", ENV{ID_MM_DEVICE_IGNORE}:="1", ENV{ID_MM_CANDIDATE}:="0", TAG+="uaccess", TAG+="seat"
    #+END_EXAMPLE

    Note, each rule must be on a single line (even if the line gets long). Udev
    rules have no syntax to support rules spanning multiple lines.

    These settings should correspond to the official documentation of tools and
    libraries used by this project:

    - [[qmk-setup][QMK documentation for configuring Halfkey bootloader used by the Ergodox EZ]]
    - [[teensy][Teensy CLI documentation,  used internally for flashing the Ergodox EZ]]
    - [[kaleidoscope-setup][Kaleidoscope documentation]]

    Each distribution is different, but on many GNU/Linux systems, udev rules
    are put in a file in =/etc/udev/rules.d= with a ".rules" extension.

    On some systems, you can activate these rules with the following commands:

    #+BEGIN_SRC shell :eval no
      udevadm control --reload-rules udevadm trigger
    #+END_SRC

    Or just restart the computer.

*** 4. For Kaleidoscope, join the necessary OS group

    #+BEGIN_QUOTE
    */NOTE:/* You don't need this step if you're flashing the Ergodox EZ.
    #+END_QUOTE

    Once udev is configured, when you plug in the Keyboardio Model 01, a
    =/dev/ttyACM0= should appear. On many systems, this device is
    group-owned by the "dialout" or the "uucp" group:

    In the following example, we can see the device is group-owned by the
    "dialout" group.

    #+BEGIN_SRC shell :eval no :exports both
      ls -l /dev/ttyACM0
    #+END_SRC

    #+RESULTS:
    : crw-rw---- 1 root dialout 166, 0 Nov 12 08:58 /dev/ttyACM0

    On most distributions, the follow commands should work to join a group
    (substituting =$TTY_GROUP= and =$USERNAME=):

    #+BEGIN_SRC shell :eval no
      sudo usermod -a -G $TTY_GROUP $USERNAME
      newgrp $TTY_GROUP
    #+END_SRC

    You should see memberships in the new group with the =groups= command:

    #+BEGIN_SRC shell :eval no :exports both
      groups | grep dialout
    #+END_SRC

    #+RESULTS:
    : users wheel video dialout docker

*** 5. Unplug and replug your keyboard

    Unplug your keyboard(s) and plug them back in, to make sure everything's
    set to program.

*** 6. Get the code and run it

    Clone this code base and go into the directory:

    #+BEGIN_SRC shell :eval no
      cd $SOME_WORKING_DIR
      clone https://github.com/shajra/shajra-keyboards.git
      cd shajra-keyboards
    #+END_SRC

    Note, the first time you run the commands described below, you'll see
    Nix doing a lot of downloading and compiling. After that, subsequent
    invocations should be quicker with less output.

**** Flashing an Ergodox EZ keyboard

     You can run the following to flash your Ergodox EZ with the new keymap,
     pressing the reset button when prompted (access the reset button with an
     unbent paperclip inserted into the small hole in the top right corner of
     the right keyboard half):

     #+BEGIN_SRC shell :eval no
       ./flash-ergodoxez
     #+END_SRC

     #+BEGIN_SRC bash :results output :exports results
       head -11 < <(./flash-ergodoxez)
     #+END_SRC

     #+RESULTS:
     #+begin_example

     Flashing ZSA Technology Lab's Ergodox EZ (custom "shajra" keymap)
     =================================================================

     FLASH SOURCE: /nix/store/kjyp1fa4apnkxk464fndn2p4g7yfkjl4-qmk-custom-shajra-src
     FLASH BINARY: /nix/store/qrls0a00bs4cr5gp5lkqi630jsrrhp6p-ergodoxez-custom-shajra-hex

     Teensy Loader, Command Line, Version 2.1
     Read "/nix/store/qrls0a00bs4cr5gp5lkqi630jsrrhp6p-ergodoxez-custom-shajra-hex": 27376 bytes, 84.9% usage
     Waiting for Teensy device...
      (hint: press the reset button)
     #+end_example

**** Flashing a Keyboardio Model 01 keyboard

     You can run the following to flash your Keyboardio Model 01, holding
     down the =Prog= key and then pressing =Enter= when prompted:

     #+BEGIN_SRC shell :eval no
       ./flash-model01
     #+END_SRC

     #+BEGIN_SRC bash :results output :exports results
       head -14 < <(./flash-model01)
     #+END_SRC

     #+RESULTS:
     #+begin_example

     Flashing Keyboardio's Model 01 (custom "shajra" keymap)
     =======================================================

     FLASH SOURCE: /nix/store/5ynaqxlwf7bag3c1ljzw0gkzfk03yvbd-model01-custom-shajra-src

     BOARD_HARDWARE_PATH="/nix/store/i4g5v7lgvy498rk2pdynrwblm3snh81w-kaleidoscope-src/arduino/hardware" /nix/store/i4g5v7lgvy498rk2pdynrwblm3snh81w-kaleidoscope-src/arduino/hardware/keyboardio/avr/libraries/Kaleidoscope/bin//kaleidoscope-builder flash
     To update your keyboard's firmware, hold down the 'Prog' key on your keyboard.

     (When the 'Prog' key glows red, you can release it.)


     When you're ready to proceed, press 'Enter'.
     #+end_example

     The =Prog= key is hardwired to be the top-left-most key of the
     Keyboardio Model 01, but the =Enter= key can be remapped. If you forget
     where the =Enter= has been mapped to on your Keyboard, you can hit
     =Enter= on another connected keyboard.

* Reverting to the factory default mapping

  This project's scripts won't save off your previous keymap from your
  keyboard. But we can revert to the keymap that your keyboard shipped with.

  This can be done with the =-F= / =--factory= switch, which both
  =./flash-ergodoxez= and =./flash-model01= support. Both scripts have a
  =-h= / =--help= in case you forget your options.

* Customization

** Customizing Keymaps

   The provided code is fairly compact. If you look in the =keymaps= directory,
   you should find familiar files that you would edit in QMK or Kaleidoscope
   projects, respectively. These keymaps are compiled into the flashing scripts
   provided with this project.

   For both keyboards, The "shajra" keymap is in it's own directory. You can
   make your own keymaps and put them in a sibling directory with the name of
   your choice, and they'll be compiled in as well.

   If you don't want to use keymaps compiled into the flashing scripts, you can
   use another directory of keymaps at runtime with the =-K= / =-keymaps=
   switch.

   Then you can use the =-k= / =--keymap= switch of either script to load your
   custom keymap by the name you chose for the keymap in the "keymaps"
   directory. The scripts should pick up changes, rebuild anything necessary,
   and flash your keyboard.

   The used keymap source code is copied into =/nix/store=, and the invocation
   of the flashing scripts will print out a "FLASH SOURCE:" line indicating the
   source used for compiling/flashing for your reference. These are the full
   source trees you'd normally use if following the QMK or Kaleidoscope
   documentation manually.

** Development

   This project relies heavily on Nix, primarily to help deal with all the
   complexity of setting up dependencies.

   The [[file:doc/nix.org][provided documentation on Nix]] introduces Nix and how to use it in the
   context of this project.

   If you want to check that everything builds before flashing your keyboard,
   you can build locally everything built by this project's continuous
   integration:

   #+BEGIN_SRC shell :results output :exports both
     nix build --no-link --file nix/ci.nix \
         && nix path-info --file nix/ci.nix
   #+END_SRC

   #+RESULTS:
   #+begin_example
   /nix/store/0bv43cxmyk8r4rdda2k33szjd0bjbs81-model01-factory-hex
   /nix/store/2xs9s19iyqvjbpihd4zrr9abqr0zh183-shajra-keyboards-licenses
   /nix/store/7a8z5gjq6a0lk8w396sqd9rb937yr93j-flash-model01
   /nix/store/8vni88vcn55vi2kpgy2942jwjvv7zaky-model01-factory-flash
   /nix/store/ahnp5bcasdrsbi66pqf04dnk6s4aji1a-ergodoxez-factory-flash
   /nix/store/khp6kfz82xky1gzw267j9zq51ajbz4wz-ergodoxez-factory-hex
   /nix/store/paw6kxmcqhv3axz6x9rdw948ksis5rlv-ergodoxez-custom-shajra-flash
   /nix/store/qd9jzdi6jdmq1fggbwamwd5xf385wy08-ergodoxez-custom-shajra-hex
   /nix/store/v9wvxg6j8p4lj0cl56k4rdb65r5n887h-flash-ergodoxez
   /nix/store/wszgnjsps8cmj1g598rw1rkdsb0p0chf-model01-custom-shajra-hex
   /nix/store/xczql0rxs23vsv2xphz4h61x2v9p26kh-model01-custom-shajra-flash
   #+end_example

* Release

  The "master" branch of the repository on GitHub has the latest released
  version of this code. There is currently no commitment to either forward or
  backward compatibility. However the scripts for compiling/flashing are
  largely stable and are less likely to change than the "shajra" keymap.

  "user/shajra" branches are personal branches that may be force-pushed to. The
  "master" branch should not experience force-pushes and is recommended for
  general use.

* License

  This project is not a modified work in the traditional sense. It provides
  scripts the end user runs to make a modified work. Most of the source code
  modified (QMK, Kaleidoscope, and Model 01) is licensed under either GPLv2 or
  GPLv3.

  If you have Nix installed, then a provided script =licenses-thirdparty= can
  be run to download all original source used, including license information.

  In the spirit of the projects we build upon, all files in this
  "shajra-keyboards" project are licensed under the terms of GPLv3 or (at your
  option) any later version.

  Please see the [[./COPYING.md][COPYING.md]] file for more details.

* Contribution

  Feel free to file issues and submit pull requests with GitHub. Ideas for how
  to improve automation are welcome. If you have ideas on how to improve the
  "shajra" keymap, just make a compelling argument considering the factors that
  have already gone into [[file:doc/design.org][its design]].

  There is only one author to date, so the following copyright covers all files
  in this project:

  Copyright © 2019 Sukant Hajra
