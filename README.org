#+title: Ergonomic Keyboard “shajra” Mappings (with Nix)
#+setupfile: doc/links.org
#+options: ^:nil

[[https://github.com/shajra/shajra-keyboards/actions][https://github.com/shajra/shajra-keyboards/workflows/CI/badge.svg]]

* About the project

This project has the “shajra” keyboard mappings for three ergonomic split
keyboards:

- [[keyboardio][Keyboardio's Model 01]], programmed with [[kaleidoscope][Kaleidoscope]] firmware.
- [[ergodox-ez][ZSA Technology Labs' Ergodox EZ]], programmed with [[qmk][QMK]] firmware
- [[moonlander][ZSA Technology Labs' Moonlander]], programmed with [[qmk][QMK]] firmware

Beyond the keymap, this project offers some streamlined automation with [[nix][Nix]] that
you can use for your own keymap. This automation works for GNU/Linux only
(sorry, not MacOS or Windows). See [[file:doc/nix.org][the provided documentation on Nix]] for more on
what Nix is, why we're motivated to use it, and how to get set up with it for
this project.

The rest of this document discusses using this automation. To get the most out
of the keymap itself, you may be interested in the [[file:doc/design.org][design document]] explaining
the motivation behind the mapping.

* The mappings

The “shajra” keymaps for these keyboards are extremely similar, which works out
well because the physical layouts of these keyboards are also similar. We can
more easily switch from one keyboard to another, and retain the design benefits
of the mapping.

** Model 01 “shajra” keymap

[[file:doc/model-01-shajra-layout.png]]

** Ergodox EZ “shajra” keymap (Moonlander similar)

Note the Moonlander keyboard is almost an identical layout to the EZ, and not
illustrated here. There are just two two less keys on the thumb cluster. The
leads to not having either Home or End on the base layer for the Moonlander. And
the "application menu" keycodes are moved to the bottom-outer corners.

[[file:doc/ergodox-ez-shajra-layout.png]]

* Using these key mappings

This project only supports a GNU/Linux operating system (sorry, not MacOS or
Windows) with the [[nix][Nix package manager]] installed.

QMK and Kaleidoscope have build complexities and dependencies that can take a
moment to work through. Nix can automate this hassle away by downloading and
setting up all the necessary third-party dependencies in a way that

- is highly reproducible
- won't conflict with your current system/configuration.

By using Nix, we won't have to worry about downloading QMK or Kaleidoscope, or
making sure we have the right version of build tools like Arduino installed, or
messing with Git submodules, or setting up environment variables. Nix does all
this for us. The provided scripts simplify using Nix even further.

The following steps will get your keyboard flashed.

** 1. Install Nix on your GNU/Linux distribution

#+include: "doc/nix.org::*Nix package manager setup" :only-contents t

** 2. Set up Cachix

#+include: "doc/nix.org::*Cache setup" :only-contents t

** 3. Make sure your udev rules are set

To program either keyboard with a new mapping, you need to augment your OS
configuration with new udev rules.

The following are recommended rules for each keyboard:

#+begin_example
  # For Ergodox EZ
  ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789B]?", \
      ENV{ID_MM_DEVICE_IGNORE}="1"
  ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789A]?", \
      ENV{MTP_NO_PROBE}="1"
  SUBSYSTEMS=="usb", ATTRS{idVendor}=="16c0", \
      ATTRS{idProduct}=="04[789ABCD]?", MODE:="0666"
  KERNEL=="ttyACM*", ATTRS{idVendor}=="16c0", \
      ATTRS{idProduct}=="04[789B]?", MODE:="0666"

  # For Moonlander
  SUBSYSTEMS=="usb", ATTRS{idVendor}=="0483", ATTRS{idProduct}=="df11", \
      MODE:="0666", SYMLINK+="stm32_dfu"

  # For Model 01
  SUBSYSTEMS=="usb", ATTRS{idVendor}=="1209", ATTRS{idProduct}=="2300", \
      SYMLINK+="model01", ENV{ID_MM_DEVICE_IGNORE}:="1", \
      ENV{ID_MM_CANDIDATE}:="0", TAG+="uaccess", TAG+="seat"
  SUBSYSTEMS=="usb", ATTRS{idVendor}=="1209", ATTRS{idProduct}=="2301", \
      SYMLINK+="model01", ENV{ID_MM_DEVICE_IGNORE}:="1", \
      ENV{ID_MM_CANDIDATE}:="0", TAG+="uaccess", TAG+="seat"
#+end_example

These settings should correspond to the official documentation of tools and
libraries used by this project:

- [[qmk-setup][QMK documentation for configuring Halfkey bootloader used by the Ergodox EZ]]
- [[teensy][Teensy CLI documentation,  used internally for flashing the Ergodox EZ]]
- [[wally-udev][Wally CLI,  used internally for flashing the Moonlander]]
- [[kaleidoscope-setup][Kaleidoscope documentation]]

Each distribution is different, but on many GNU/Linux systems, udev rules are
put in a file in =/etc/udev/rules.d= with a ".rules" extension.

On some systems, you can activate these rules with the following commands:

#+begin_src sh :eval no
udevadm control --reload-rules udevadm trigger
#+end_src

Or just restart the computer.

** 4. For Kaleidoscope, join the necessary OS group

#+begin_quote
*/NOTE:/* You don't need this step if you're flashing the Ergodox EZ or
Moonlander.
#+end_quote

Once udev is configured, when you plug in the Keyboardio Model 01, a serial
device should show up under =/dev/serial/by-id= with a name matching
"usb-Keyboardio_Model_01_*". This is a human-readable symlink pointing to the
real device which should be something like =/dev/ttyACM0=. On many systems, this
device is group-owned by the "dialout" or the "uucp" group:

In the following example, we can see the device is group-owned by the "dialout"
group.

#+begin_src sh :eval no :exports both
ls -lL /dev/serial/by-id/usb-Keyboardio_Model_01_*
#+end_src

#+results:
: crw-rw---- 1 root dialout 166, 0 Dec 28 20:09 /dev/serial/by-id/usb-Keyboardio_Model_01_Ckbio01E-if00

On most distributions, the follow commands should work to join a group
(substituting =$TTY_GROUP= and =$USERNAME=):

#+begin_src sh :eval no
sudo usermod -a -G $TTY_GROUP $USERNAME
newgrp $TTY_GROUP
#+end_src

You should see memberships in the new group with the =groups= command:

#+begin_src sh :eval no :exports both
groups | grep dialout
#+end_src

#+results:
: users wheel video dialout docker

** 5. Unplug and replug your keyboard

Unplug your keyboard(s) and plug them back in, to make sure everything's set to
program. Rebooting your computer is probably overkill, but would probably work
too.

** 6. Get the code and run it

Clone this code base and go into the directory:

#+begin_src sh :eval no
cd $SOME_WORKING_DIR
clone https://github.com/shajra/shajra-keyboards.git
cd shajra-keyboards
#+end_src

Note, the first time you run the commands described below, you'll see Nix doing
a lot of downloading and compiling. After that, subsequent invocations should be
quicker with less output.

*** Flashing an Ergodox EZ keyboard

You can run the following to flash your Ergodox EZ with the new keymap, pressing
the reset button when prompted (access the reset button with an unbent paperclip
inserted into the small hole in the top right corner of the right keyboard
half):

#+begin_src sh :eval no
./flash-ergodoxez
#+end_src

#+name: flash-ergodoxez
#+begin_src bash :results output :exports results
head -11 < <(./flash-ergodoxez)
#+end_src

#+results: flash-ergodoxez
#+begin_example

Flashing ZSA Technology Lab's Ergodox EZ (custom "shajra" keymap)
=================================================================

FLASH SOURCE: /nix/store/qlxpmp31dymx0j2rd4aawpkv4cv3pbcv-qmk-custom-shajra-src
FLASH BINARY: /nix/store/i8g5jac8f82vxf1s0ibvwnsd7rfyv9wh-ergodoxez-custom-shajra.hex

Teensy Loader, Command Line, Version 2.1
Read "/nix/store/i8g5jac8f82vxf1s0ibvwnsd7rfyv9wh-ergodoxez-custom-shajra.hex": 22288 bytes, 69.1% usage
Waiting for Teensy device...
 (hint: press the reset button)
#+end_example

#+name: flash-ergodoxez-cleanup
#+begin_src sh :results output silent :exports none
pkill teensy-loader
#+end_src

*** Flashing a Moonlander keyboard

You can run the following to flash your Moonlander with the new keymap, pressing
the reset button when prompted (access the reset button with an unbent paperclip
inserted into the small hole in the top left corner of the left keyboard half):

#+begin_src sh :eval no
./flash-moonlander
#+end_src

#+name: flash-moonlander
#+begin_src bash :results output :exports results
head -c350 < <(./flash-moonlander) | ansifilter
#+end_src

#+results: flash-moonlander
: 
: Flashing ZSA Technology Lab's Moonlander (custom "shajra" keymap)
: =================================================================
: 
: FLASH SOURCE: /nix/store/wndcbm4l12njg2yv40zj2p2f1qxlzw1q-qmk-custom-shajra-src
: FLASH BINARY: /nix/store/m7pnfxn36aac35b1ngkdaa52fsdzsjg5-moonlander-custom-shajra.bin
: 
: ⠋ Press the reset button of your keyboard.

*** Flashing a Keyboardio Model 01 keyboard

You can run the following to flash your Keyboardio Model 01, holding down the
=Prog= key and then pressing =Enter= when prompted:

#+begin_src sh :eval no
./flash-model01
#+end_src

#+name: flash-model01
#+begin_src bash :results output :exports results
head -14 < <(./flash-model01)
#+end_src

#+results: flash-model01
#+begin_example

Flashing Keyboardio's Model 01 (custom "shajra" keymap)
=======================================================

FLASH SOURCE: /nix/store/py9jgcmilw2kvjgn4nsgy4jjgpl01rsg-model01-custom-shajra-src
FLASH BINARY: /nix/store/80zimj48r5wcv33jxxrzv7zsljkaca30-model01-custom-shajra-hex
DETECTED PORT: /dev/ttyACM0

To flash your keyboard, you must hold down the 'Prog' key.
While holding the 'Prog' key, press 'Enter', but continue to
hold the 'Prog' key.  You can release it once flashing has
started, and the key glows red.

Do these steps now, or Ctrl-C to quit...
#+end_example

The =Prog= key is hardwired to be the top-left-most key of the Keyboardio Model
01, but the =Enter= key can be remapped. If you forget where the =Enter= has
been mapped to on your Keyboard, you can hit =Enter= on another connected
keyboard.

* Reverting to the factory default mapping

This project's scripts won't save off your previous keymap from your keyboard.
But we can revert to the keymap that your keyboard shipped with.

This can be done with the =-F= / =--factory= switch, which all the flashing
scripts support. These scripts have a =-h= / =--help= switch in case you forget
your options.

* Customization

** Customizing keymaps

The provided code is fairly compact. If you look in the =keymaps= directory, you
should find familiar files that you would edit in QMK or Kaleidoscope projects,
respectively. These keymaps are compiled into the flashing scripts provided with
this project.

For both keyboards, The “shajra” keymap is in its own directory. You can make
your own keymaps and put them in a sibling directory with the name of your
choice, and they'll be compiled in as well.

If you don't want to use keymaps compiled into the flashing scripts, you can use
another directory of keymaps at runtime with the =-K= / =-keymaps= switch.

Then you can use the =-k= / =--keymap= switch of either script to load your
custom keymap by the name you chose for the keymap in the "keymaps" directory.
The scripts should pick up changes, rebuild anything necessary, and flash your
keyboard.

The used keymap source code is copied into =/nix/store=, and the invocation of
the flashing scripts will print out a "FLASH SOURCE:" line indicating the source
used for compiling/flashing for your reference. These are the full source trees
you'd normally use if following the QMK or Kaleidoscope documentation manually.

** Development

This project relies heavily on Nix, primarily to help deal with all the
complexity of setting up dependencies.

The [[file:doc/nix.org][provided documentation on Nix]] introduces Nix and how to use it in the
context of this project.

If you want to check that everything builds before flashing your keyboard, you
can build locally everything built by this project's continuous integration:

#+name: nix-build
#+begin_src sh :results output :exports both
nix build --no-link --file nix/ci.nix \
    && nix path-info --file nix/ci.nix
#+end_src

#+results: nix-build
#+begin_example
/nix/store/2bqzv0qf9j5caw6sj1s52w27n4lk8ysj-moonlander-factory-flash
/nix/store/2nmlqmawnbq8q03zj8ipw11hw8552izz-ergodoxez-factory-flash
/nix/store/80zimj48r5wcv33jxxrzv7zsljkaca30-model01-custom-shajra-hex
/nix/store/89x1wx6b818n21cmbhr6n7shk0h59ilw-model01-factory-flash
/nix/store/8szb707d5x00nvgsw30dw60gsrg8wv57-flash-ergodoxez
/nix/store/9wbn2ijn88x82aqrzmih2qkl73khv8n5-shajra-keyboards-licenses
/nix/store/b26wjw6izxk5gm65m4nacbsrn12c0rvs-ergodoxez-factory.hex
/nix/store/gnv95xb6xnnxgqibh3vqg0rzlfr9rpii-model01-factory-hex
/nix/store/i8g5jac8f82vxf1s0ibvwnsd7rfyv9wh-ergodoxez-custom-shajra.hex
/nix/store/krclgscrds23is72ilcfl1nzsvgzjhid-model01-custom-shajra-flash
/nix/store/ld0a7ikvd947y63hy5nk62z5sc18wfhs-ergodoxez-custom-shajra-flash
/nix/store/m7pnfxn36aac35b1ngkdaa52fsdzsjg5-moonlander-custom-shajra.bin
/nix/store/pmq0hn0fkvvsz1zrgy5ysjcia4i951lq-moonlander-custom-shajra-flash
/nix/store/q35vqgx13s14bqn4j852q28kik13x90b-flash-model01
/nix/store/qakgwrm7dkm5spmb0fn01z6ign3kjqws-flash-moonlander
/nix/store/ys5p94axyql7kbaj9msvrz66mwpdcnr6-moonlander-factory.bin
#+end_example

* Release

The "main" branch of the repository on GitHub has the latest released version
of this code. There is currently no commitment to either forward or backward
compatibility. However the scripts for compiling/flashing are largely stable and
are less likely to change than the “shajra” keymap.

"user/shajra" branches are personal branches that may be force-pushed to. The
"main" branch should not experience force-pushes and is recommended for
general use.

* License

This project is not a modified work in the traditional sense. It provides
scripts the end user runs to make a modified work. Most of the source code
modified (QMK, Kaleidoscope, and Model 01) is licensed under either GPLv2 or
GPLv3.

If you have Nix installed, then a provided script =licenses-thirdparty= can be
run to download all original source used, including license information.

In the spirit of the projects we build upon, all files in this
"shajra-keyboards" project are licensed under the terms of GPLv3 or (at your
option) any later version.

Please see the [[./COPYING.md][COPYING.md]] file for more details.

* Contribution

Feel free to file issues and submit pull requests with GitHub. Ideas for how to
improve automation are welcome. If you have ideas on how to improve the “shajra”
keymap, just make a compelling argument considering the factors that have
already gone into [[file:doc/design.org][its design]].

There is only one author to date, so the following copyright covers all files in
this project:

Copyright © 2019 Sukant Hajra
